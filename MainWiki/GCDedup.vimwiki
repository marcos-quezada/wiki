# Excursions into deduplication

The best way of tell how effective *string deduplication* would be in an application would be to look at the response rates and memory consumption. In the end, what does it matter if we saved memory, but our performance is worse? Memory is cheap. On the other hand, less memory consumption leads to less reachable objects, and can thus give us better speed.

There was a flag in Java 8 `-XX:+PrintStringDeduplicationStatistics`. This changed to `-Xlog:'stringdedup*=debug'` with Java 9 unified logging. Each time that deduplication is triggered, it outputs a stream of useful information such as:

```bash
Concurrent String Deduplication (90.162s)
Concurrent String Deduplication 72.0B->24.0B(48.0B)
    avg 59.8% (90.162s, 90.162s) 0.020ms
  Last Exec: 0.020ms, Idle: 16740.738ms, Blocked: 0/0.000ms
    Inspected:               3
      Skipped:               0(  0.0%)
      Hashed:                0(  0.0%)
      Known:                 0(  0.0%)
      New:                   3(100.0%)     72.0B
    Deduplicated:            2( 66.7%)     48.0B( 66.7%)
      Young:                 2(100.0%)     48.0B(100.0%)
      Old:                   0(  0.0%)      0.0B(  0.0%)
  Total Exec: 3/1.014ms, Idle: 3/89992.409ms, Blocked: 0/0.000ms
    Inspected:            8457
      Skipped:               0(  0.0%)
      Hashed:              610(  7.2%)
      Known:              5640( 66.7%)
      New:                2817( 33.3%)     86.7K
    Deduplicated:         1810( 64.3%)     51.8K( 59.8%)
      Young:              1810(100.0%)     51.8K(100.0%)
      Old:                   0(  0.0%)      0.0B(  0.0%)
  Table
    Memory Usage: 187.7K
    Size: 4096, Min: 1024, Max: 16777216
    Entries: 6644, Load: 162.2%, Cached: 0, Added: 6645, Removed: 1
    Resize Count: 2, Shrink Threshold: 2730(66.7%),
    Grow Threshold: 8192(200.0%)
    Rehash Count: 0, Rehash Threshold: 120, Hash Seed: 0x0
    Age Threshold: 3
  Queue
    Dropped: 0
```
 Every time a young GC is triggered (also called scavenge or partial GC), the age of our survivors increases. Once they reach the tenuring threshold, they are moved from the young to the old regions. By default, strings are deduplicated once they reach age 3, thus at their third young GC. We don't want to do it earlier, as deduplication costs precious CPU cycles. If the string won't survive into old age, there is also no need to try save memory. If for some reason the string is prematurely promoted into old, then it is deduplicated early as well.

To try this all out, we use a `DeduplicationExplorer` program. To get the most benefit, you'll have to run it yourself. You connect to it via telnet `localhost 8080` and then send it text and commands. All the text is stored in an `ArrayList`. Here are the commands supported:


* `print`: shows the strings in the list, together with the value array references
* `clear`: clears the strings from the list
* `ygc`: causes a young GC
* `fgc`: causes a full GC
* `close`: closes the connection

Here is the code for the `DeduplicationExplorer`:

```java
import java.io.*;
import java.lang.management.*;
import java.lang.reflect.*;
import java.net.*;
import java.util.*;

// Java8:
//   -XX:+UseG1GC
//   -XX:+UseStringDeduplication
//   -XX:+PrintStringDeduplicationStatistics
//   -verbose:gc
// Java11:
//   -XX:+UseStringDeduplication
//   -Xlog:stringdedup*=debug
//   -verbose:gc
public class DeduplicationExplorer {
  public static void main(String... args) throws IOException {
    List<String> lines = new ArrayList<>();
    Socket socket = new ServerSocket(8080).accept();
    PrintStream out = new PrintStream(
        socket.getOutputStream(), true);
    out.println("Commands: clear, print, ygc, fgc, close");
    BufferedReader in = new BufferedReader(
        new InputStreamReader(
            socket.getInputStream()));
    String line;
    while ((line = in.readLine()) != null) {
      System.out.println(line);
      switch (line) {
        case "clear": lines.clear(); break;
        case "print": print(lines); break;
        case "ygc": youngGC(); break; // young GC
        case "fgc": System.gc(); break; // full GC
        case "close": return;
        default: lines.add(line);
      }
    }
  } 

  private static void youngGC() {
    long collectionCount = YOUNG_GC.getCollectionCount();
    do {
      // array is too big to be eliminated with escape analysis
      byte[] bytes = new byte[1024];
    } while (YOUNG_GC.getCollectionCount() == collectionCount);
  } 

  private static void print(List<String> lines) {
    System.out.println("lines:");
    lines.forEach(DeduplicationExplorer::print);
  } 

  private static void print(String line) {
    try {
      System.out.printf("\t\"%s\" - %s%n", line, VALUE.get(line));
    } catch (IllegalAccessException e) {
      throw new IllegalStateException(e);
    }
  } 

  private final static Field VALUE; 

  static {
    try {
      VALUE = String.class.getDeclaredField("value");
      VALUE.setAccessible(true);
    } catch (NoSuchFieldException e) {
      throw new Error(e);
    }
  } 

  private final static GarbageCollectorMXBean YOUNG_GC; 

  static {
    YOUNG_GC = ManagementFactory.getGarbageCollectorMXBeans()
        .stream()
        .filter(pool -> pool.getName().equals(
            "G1 Young Generation"))
        .findFirst()
        .orElseThrow(() -> new Error("Could not find G1 Young " +
            "Generation Garbage Collector MXBean"));
  }
}
```

Start your installed JDK e.g. OpenJDK 11.0.2 with the following flags:

`-XX:+UseStringDeduplication -Xlog:'stringdedup*=debug' -verbose:gc`

Connect with `telnet localhost 8080` and try it out, for example:

```bash
hello
hello
hello
print
```
On the program output, you should see something like this:

```bash
hello
hello
hello
print
lines:
  "hello" - [B@5d099f62
  "hello" - [B@37f8bb67
  "hello" - [B@49c2faae
```
If the string happened to already exist in the JVM as a constant, then that will be the basis of our shared `byte[]`. For example, let's `clear` and then send the string "main" three times, followed by `print`. We see something like this:

```bash
clear
main
main
main
print
lines:
  "main" - [B@5010be6
  "main" - [B@685f4c2e
  "main" - [B@7daf6ecc
```

If we now issue a `fgc` and a `print` we should see:

```bash
fgc
    *snip* GC output and deduplication statistics *snip*
print
lines:
  "main" - [B@1f7e245f
  "main" - [B@1f7e245f
  "main" - [B@1f7e245f
```

Note that the `byte[]` is none of those we had read from the `BufferedReader`. And if we `clear` and send "main" again and then issue a `fgc` and a `print`, we will see again:

```bash
print
lines:
  "main" - [B@1f7e245f
```

Since we have a method called "main" in our JVM, all our strings are sharing its `byte[]`. 

## Young GC
